use std::sync::Arc;

/// THIS IS A GENERATED FILE. DO NOT MODIFY MANUALLY.
///
/// This file was auto generated by rindexer - https://github.com/joshstevens19/rindexer.
/// Any manual changes to this file will be overwritten.
use ethers::providers::{Http, Provider, RetryClient};
use ethers::types::U64;
use rindexer::{
    lazy_static,
    provider::{create_jsonrpc_client, JsonRpcCachedProvider, ProviderInterface, RetryClientError},
    public_read_env_value, HeaderMap,
};

#[allow(dead_code)]
fn create_shadow_client(
    rpc_url: &str,
    compute_units_per_second: Option<u64>,
    max_block_range: Option<U64>,
) -> Result<Arc<dyn ProviderInterface>, RetryClientError> {
    let mut header = HeaderMap::new();
    header.insert(
        "X-SHADOW-API-KEY",
        public_read_env_value("RINDEXER_PHANTOM_API_KEY").unwrap().parse().unwrap(),
    );
    create_jsonrpc_client(
        rpc_url.parse().unwrap(),
        compute_units_per_second,
        max_block_range,
        header,
    )
    .and_then(|client| Ok(client as Arc<dyn ProviderInterface>))
}

lazy_static! {
    static ref ETHEREUM_PROVIDER: Arc<JsonRpcCachedProvider> = create_jsonrpc_client(
        public_read_env_value("https://mainnet.gateway.tenderly.co")
            .unwrap_or("https://mainnet.gateway.tenderly.co".to_string())
            .parse()
            .unwrap(),
        None,
        None,
        HeaderMap::new()
    )
    .expect("Error creating provider");
    static ref BASE_PROVIDER: Arc<JsonRpcCachedProvider> = create_jsonrpc_client(
        public_read_env_value("https://mainnet.base.org")
            .unwrap_or("https://mainnet.base.org".to_string())
            .parse()
            .unwrap(),
        None,
        None,
        HeaderMap::new()
    )
    .expect("Error creating provider");
}
pub fn get_ethereum_provider_cache() -> Arc<JsonRpcCachedProvider> {
    Arc::clone(&ETHEREUM_PROVIDER)
}

pub fn get_ethereum_provider() -> Arc<Provider<RetryClient<Http>>> {
    ETHEREUM_PROVIDER.get_inner_provider()
}

pub fn get_base_provider_cache() -> Arc<JsonRpcCachedProvider> {
    Arc::clone(&BASE_PROVIDER)
}

pub fn get_base_provider() -> Arc<Provider<RetryClient<Http>>> {
    BASE_PROVIDER.get_inner_provider()
}

pub fn get_provider_cache_for_network(network: &str) -> Arc<JsonRpcCachedProvider> {
    if network == "ethereum" {
        return get_ethereum_provider_cache();
    }

    if network == "base" {
        return get_base_provider_cache();
    }
    panic!("Network not supported")
}
